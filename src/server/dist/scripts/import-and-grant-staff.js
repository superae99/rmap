"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const database_1 = require("../config/database");
const User_1 = require("../models/User");
const XLSX = __importStar(require("xlsx"));
const path = __importStar(require("path"));
const bcryptjs_1 = __importDefault(require("bcryptjs"));
const importAndGrantStaff = async () => {
    try {
        // Excel ÌååÏùº Í≤ΩÎ°ú
        const excelPath = path.join(__dirname, '../../data/Users2.xlsx');
        console.log('üìÑ Excel ÌååÏùº ÏùΩÍ∏∞:', excelPath);
        // Excel ÌååÏùº ÏùΩÍ∏∞
        const workbook = XLSX.readFile(excelPath);
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const data = XLSX.utils.sheet_to_json(worksheet);
        console.log(`üìä Ï¥ù ${data.length}Í∞úÏùò ÏÇ¨Ïö©Ïûê Î∞úÍ≤¨\n`);
        // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞
        await database_1.AppDataSource.initialize();
        console.log('üîç Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÏÑ±Í≥µ\n');
        const userRepository = database_1.AppDataSource.getRepository(User_1.User);
        // Ïπ¥Ïö¥ÌÑ∞
        let importedCount = 0;
        let skippedCount = 0;
        let errorCount = 0;
        const excludedAccount = 'hyeongraekim';
        console.log('üîÑ ÏÇ¨Ïö©Ïûê Îì±Î°ù Î∞è Staff Í∂åÌïú Î∂ÄÏó¨ ÏãúÏûë...');
        console.log('='.repeat(80));
        for (const row of data) {
            const rowData = row;
            const account = rowData['Í≥ÑÏ†ï'];
            const employeeId = String(rowData['ÏßÅÏõê ID']);
            const employeeName = rowData['ÏÑ±Î™Ö'];
            if (!account || !employeeId || !employeeName) {
                console.log('‚ö†Ô∏è  ÌïÑÏàò Ï†ïÎ≥¥ ÎàÑÎùΩ:', { account, employeeId, employeeName });
                errorCount++;
                continue;
            }
            // hyeongraekim Í≥ÑÏ†ï Ï†úÏô∏
            if (account === excludedAccount) {
                console.log(`‚ùå Ï†úÏô∏: ${account} (${employeeName}) - ÏöîÏ≤≠Ïóê Îî∞Îùº Ï†úÏô∏`);
                skippedCount++;
                continue;
            }
            try {
                // Í∏∞Ï°¥ ÏÇ¨Ïö©Ïûê ÌôïÏù∏ (ÏÇ¨Î≤àÍ≥º Í≥ÑÏ†ï Îëò Îã§ Ï≤¥ÌÅ¨)
                const existingUser = await userRepository.findOne({
                    where: [
                        { employeeId: employeeId },
                        { account: account }
                    ]
                });
                if (existingUser) {
                    console.log(`‚è≠Ô∏è  Ïä§ÌÇµ: ${account} (${employeeName}) - Ïù¥ÎØ∏ Ï°¥Ïû¨`);
                    skippedCount++;
                    continue;
                }
                // ÎπÑÎ∞ÄÎ≤àÌò∏ Ìï¥ÏãúÌôî
                const password = rowData['ÎπÑÎ∞ÄÎ≤àÌò∏'] || 'lotte1234!';
                const hashedPassword = await bcryptjs_1.default.hash(password, 10);
                // ÏÉà ÏÇ¨Ïö©Ïûê ÏÉùÏÑ±
                const newUser = userRepository.create({
                    employeeId: employeeId,
                    employeeName: employeeName,
                    account: account,
                    password: hashedPassword,
                    // Ï°∞ÏßÅ Ï†ïÎ≥¥
                    headquartersCode: rowData['Î≥∏Î∂ÄÏΩîÎìú'] || null,
                    headquartersName: rowData['Î≥∏Î∂Ä'] || null,
                    divisionCode: rowData['Î∂ÄÎ¨∏ÏΩîÎìú'] === 'Null' ? null : rowData['Î∂ÄÎ¨∏ÏΩîÎìú'],
                    divisionName: rowData['Î∂ÄÎ¨∏'] === 'Undefined' ? null : rowData['Î∂ÄÎ¨∏'],
                    branchCode: rowData['ÏßÄÏÇ¨ÏΩîÎìú'] === 'Null' ? null : rowData['ÏßÄÏÇ¨ÏΩîÎìú'],
                    branchName: rowData['ÏßÄÏÇ¨'] === 'Undefined' ? null : rowData['ÏßÄÏÇ¨'],
                    officeCode: rowData['ÏßÄÏ†êÏΩîÎìú'] === 'Null' ? null : rowData['ÏßÄÏ†êÏΩîÎìú'],
                    officeName: rowData['ÏßÄÏ†ê'] === 'Undefined' ? null : rowData['ÏßÄÏ†ê'],
                    // ÏßÅÍ∏â/ÏßÅÏ±Ö Ï†ïÎ≥¥ - Staff Í∂åÌïúÏùÑ ÏúÑÌï¥ 'Ïä§ÌÉ≠' Ï∂îÍ∞Ä
                    position: rowData['ÏßÅÍ∏â'] ? `${rowData['ÏßÅÍ∏â']}/Ïä§ÌÉ≠` : 'Ïä§ÌÉ≠',
                    jobTitle: rowData['ÏßÅÏ±Ö'] ? `${rowData['ÏßÅÏ±Ö']}(Ïä§ÌÉ≠Í∂åÌïú)` : 'Ïä§ÌÉ≠Í∂åÌïú',
                    assignment: rowData['Î∞úÎ†πÏßÅÎ¨¥'] || null,
                    fieldType: rowData['Ïä§ÌÉ≠/ÌïÑÎìú'] || null,
                    // Í≥†Ïö© Ï†ïÎ≥¥
                    employmentType: rowData['Í≥†Ïö©Íµ¨Î∂Ñ'] === 'Í≥†Ï†ïÏßÅ' ? 'Ï†ïÍ∑úÏßÅ' : rowData['Í≥†Ïö©Íµ¨Î∂Ñ'],
                    workStatus: rowData['Í∑ºÎ¨¥ÏÉÅÌÉú'] || 'Ïû¨ÏßÅ',
                    // ÏãúÏä§ÌÖú Ï†ïÎ≥¥
                    isActive: true,
                    createdAt: new Date(),
                    updatedAt: new Date()
                });
                await userRepository.save(newUser);
                console.log(`‚úÖ Îì±Î°ù: ${account} (${employeeName})`);
                console.log(`   - ÏÇ¨Î≤à: ${employeeId}`);
                console.log(`   - ÏßÅÍ∏â: ${rowData['ÏßÅÍ∏â']} ‚Üí ${newUser.position}`);
                console.log(`   - ÏßÅÏ±Ö: ${rowData['ÏßÅÏ±Ö']} ‚Üí ${newUser.jobTitle}`);
                console.log(`   - Ï°∞ÏßÅ: ${newUser.headquartersName} > ${newUser.divisionName || 'N/A'} > ${newUser.officeName || 'N/A'}`);
                importedCount++;
            }
            catch (error) {
                console.error(`‚ùå Ïò§Î•ò Î∞úÏÉù - ${account} (${employeeName}):`, error);
                errorCount++;
            }
        }
        console.log('='.repeat(80));
        console.log('\nüìä Ï≤òÎ¶¨ Í≤∞Í≥º:');
        console.log(`- ‚úÖ Îì±Î°ù ÏôÑÎ£å: ${importedCount}Î™Ö`);
        console.log(`- ‚è≠Ô∏è  Ïä§ÌÇµ: ${skippedCount}Î™Ö`);
        console.log(`- ‚ùå Ïò§Î•ò: ${errorCount}Î™Ö`);
        console.log(`- üìã Ï†ÑÏ≤¥ Ï≤òÎ¶¨: ${data.length}Î™Ö`);
        // ÌòÑÏû¨ staff Í∂åÌïú ÏÇ¨Ïö©Ïûê Ïàò ÌôïÏù∏
        const totalStaffUsers = await userRepository
            .createQueryBuilder('user')
            .where('user.position LIKE :position', { position: '%Ïä§ÌÉ≠%' })
            .orWhere('user.jobTitle LIKE :jobTitle', { jobTitle: '%Ïä§ÌÉ≠%' })
            .andWhere('user.isActive = :isActive', { isActive: true })
            .getCount();
        console.log(`\nüìä ÌòÑÏû¨ Ï†ÑÏ≤¥ Staff Í∂åÌïú ÏÇ¨Ïö©Ïûê: ${totalStaffUsers}Î™Ö`);
        // ÏÉàÎ°ú Îì±Î°ùÎêú ÏÇ¨Ïö©ÏûêÎì§ ÌôïÏù∏
        if (importedCount > 0) {
            console.log('\nüìã ÏÉàÎ°ú Îì±Î°ùÎêú Staff ÏÇ¨Ïö©Ïûê Î™©Î°ù:');
            console.log('-'.repeat(80));
            const newStaffUsers = await userRepository
                .createQueryBuilder('user')
                .where('user.position LIKE :position', { position: '%Ïä§ÌÉ≠%' })
                .orWhere('user.jobTitle LIKE :jobTitle', { jobTitle: '%Ïä§ÌÉ≠%' })
                .andWhere('user.isActive = :isActive', { isActive: true })
                .andWhere('user.createdAt >= :today', { today: new Date().toISOString().split('T')[0] })
                .orderBy('user.employeeId', 'ASC')
                .getMany();
            newStaffUsers.forEach(user => {
                console.log(`${user.employeeId} | ${user.employeeName} | ${user.account} | ${user.position} | ${user.jobTitle}`);
            });
        }
    }
    catch (error) {
        console.error('‚ùå Ï†ÑÏ≤¥ Ïò§Î•ò Î∞úÏÉù:', error);
    }
    finally {
        await database_1.AppDataSource.destroy();
    }
};
// Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
importAndGrantStaff();
//# sourceMappingURL=import-and-grant-staff.js.map